diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
index 00a4b8e052f68..0661b2c52e6d7 100644
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -2192,6 +2192,14 @@ source_set("browser") {
     "worker_host/worker_script_loader.h",
     "worker_host/worker_script_loader_factory.cc",
     "worker_host/worker_script_loader_factory.h",
+    "bytectf/bytedevice_impl.cc",
+    "bytectf/bytedevice_impl.h",
+    "bytectf/bytebucket_impl.cc",
+    "bytectf/bytebucket_impl.h",
+    "bytectf/bdevice.h",
+    "bytectf/bdevice.cc",
+    "bytectf/BDeviceHandle.h",
+    "bytectf/BDeviceHandle.cc",
   ]
 
   if (is_mac) {
diff --git a/content/browser/browser_interface_binders.cc b/content/browser/browser_interface_binders.cc
index bebc8d7596662..97086306a6b5c 100644
--- a/content/browser/browser_interface_binders.cc
+++ b/content/browser/browser_interface_binders.cc
@@ -19,6 +19,8 @@
 #include "content/browser/bad_message.h"
 #include "content/browser/browser_context_impl.h"
 #include "content/browser/browser_main_loop.h"
+#include "content/browser/bytectf/bytedevice_impl.h"
+#include "content/browser/bytectf/bytebucket_impl.h"
 #include "content/browser/browsing_topics/browsing_topics_document_host.h"
 #include "content/browser/contacts/contacts_manager_impl.h"
 #include "content/browser/content_index/content_index_service_impl.h"
@@ -104,6 +106,8 @@
 #include "third_party/blink/public/mojom/background_sync/background_sync.mojom.h"
 #include "third_party/blink/public/mojom/bluetooth/web_bluetooth.mojom.h"
 #include "third_party/blink/public/mojom/buckets/bucket_manager_host.mojom.h"
+#include "third_party/blink/public/mojom/bytectf/bytedevice.mojom.h"
+#include "third_party/blink/public/mojom/bytectf/bytebucket.mojom.h"
 #include "third_party/blink/public/mojom/cache_storage/cache_storage.mojom.h"
 #include "third_party/blink/public/mojom/choosers/color_chooser.mojom.h"
 #include "third_party/blink/public/mojom/compute_pressure/compute_pressure.mojom.h"
@@ -728,6 +732,12 @@ void PopulateFrameBinders(RenderFrameHostImpl* host, mojo::BinderMap* map) {
   map->Add<blink::mojom::AudioContextManager>(base::BindRepeating(
       &RenderFrameHostImpl::GetAudioContextManager, base::Unretained(host)));
 
+  map->Add<blink::mojom::ByteDevice>(base::BindRepeating(
+        &RenderFrameHostImpl::GetByteDevice, base::Unretained(host)));
+
+  map->Add<blink::mojom::ByteBucket>(base::BindRepeating(
+        &RenderFrameHostImpl::GetByteBucket, base::Unretained(host)));
+
   map->Add<device::mojom::BatteryMonitor>(
       base::BindRepeating(&BindBatteryMonitor, base::Unretained(host)));
 
diff --git a/content/browser/bytectf/BDeviceHandle.cc b/content/browser/bytectf/BDeviceHandle.cc
new file mode 100644
index 0000000000000..68a1c0decf893
--- /dev/null
+++ b/content/browser/bytectf/BDeviceHandle.cc
@@ -0,0 +1,29 @@
+#include <iostream>
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "content/browser/bytectf/BDeviceHandle.h"
+#include "base/bind.h"
+#include "base/logging.h"
+
+namespace content {
+
+    BDeviceHandle::BDeviceHandle() = default;
+    BDeviceHandle::~BDeviceHandle() = default;
+    BDeviceHandleImpl::BDeviceHandleImpl(scoped_refptr<content::BDevice> device): device_(std::move(device)) {}
+    BDeviceHandleImpl::~BDeviceHandleImpl() {}
+
+    void BDeviceHandleImpl::Close(){
+        if (!device_)
+            return;
+        device_->HandleClosed(this);
+        device_ = nullptr;
+    }
+
+    void BDeviceHandleImpl::SetState(uint64_t state){
+        state_ = &state;
+    }
+
+    uint64_t BDeviceHandleImpl::GetState(){
+        auto result = *state_;
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/content/browser/bytectf/BDeviceHandle.h b/content/browser/bytectf/BDeviceHandle.h
new file mode 100644
index 0000000000000..14f277cbc8385
--- /dev/null
+++ b/content/browser/bytectf/BDeviceHandle.h
@@ -0,0 +1,42 @@
+#ifndef CONTENT_BROWSER_BDEVICEHANDLE_H_
+#define CONTENT_BROWSER_BDEVICEHANDLE_H_
+
+#include <iostream>
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "base/bind.h"
+#include "content/browser/bytectf/bdevice.h"
+
+namespace content{
+class BDevice;
+
+class BDeviceHandle : public base::RefCountedThreadSafe<BDeviceHandle>
+{
+public:
+    virtual void SetState(uint64_t state) = 0;
+    virtual uint64_t GetState() = 0;
+    virtual void Close() = 0;
+protected:
+    friend class base::RefCountedThreadSafe<BDeviceHandle>;
+    BDeviceHandle();
+    virtual ~BDeviceHandle();
+};
+
+class BDeviceHandleImpl : public BDeviceHandle
+{
+public:
+    BDeviceHandleImpl(scoped_refptr<BDevice> device);
+    void SetState(uint64_t state) override;
+    uint64_t GetState() override;
+    void Close() override;
+protected:
+    friend class ByteDeviceImpl;
+    friend class BDevice;
+    ~BDeviceHandleImpl() override;
+private:
+    uint64_t* state_;
+    scoped_refptr<BDevice> device_;
+    std::array<uint64_t, 100> array_;
+};
+}
+
+#endif
\ No newline at end of file
diff --git a/content/browser/bytectf/bdevice.cc b/content/browser/bytectf/bdevice.cc
new file mode 100644
index 0000000000000..bad1cce1b4d85
--- /dev/null
+++ b/content/browser/bytectf/bdevice.cc
@@ -0,0 +1,40 @@
+#include <iostream>
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "content/browser/bytectf/bdevice.h"
+#include "base/bind.h"
+#include "base/logging.h"
+
+namespace content {
+
+    BDevice::BDevice() {}
+    BDevice::~BDevice() {}
+
+    void BDevice::Open(OpenCallback callback){
+        sleep(10);
+        scoped_refptr<BDeviceHandleImpl> device_handle = new BDeviceHandleImpl(this);
+        device_handle->SetState(200);
+        handles().push_back(device_handle.get());
+        std::move(callback).Run(device_handle);
+    }
+    
+    void BDevice::OnDisconnect(){
+        for (auto* handle : handles_){
+            handle->Close();
+        }
+    }
+
+    void BDevice::HandleClosed(BDeviceHandleImpl* handle){
+        handles_.remove(handle);
+    }
+
+    uint64_t BDevice::OnGet(int64_t num){
+        uint64_t result = 0;
+        int64_t index = 0;
+        for (auto* handle : handles_){
+            if((unsigned long)handle->state_ != 0xdeadbeefdeadbeef && num == index)
+                result = *handle->state_;
+            index++;
+        }
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/content/browser/bytectf/bdevice.h b/content/browser/bytectf/bdevice.h
new file mode 100644
index 0000000000000..0514b0d02f97e
--- /dev/null
+++ b/content/browser/bytectf/bdevice.h
@@ -0,0 +1,35 @@
+#ifndef CONTENT_BROWSER_BDEVICE_H_
+#define CONTENT_BROWSER_BDEVICE_H_
+
+#include <iostream>
+#include <list>
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "third_party/blink/public/mojom/bytectf/bytebucket.mojom.h"
+#include "base/bind.h"
+#include "content/browser/bytectf/BDeviceHandle.h"
+#include "mojo/public/cpp/bindings/shared_remote.h"
+#include "content/browser/bytectf/bytedevice_impl.h"
+
+namespace content{
+class BDeviceHandleImpl;
+//class deviceobject;
+
+class BDevice : public base::RefCountedThreadSafe<BDevice>{
+public:
+    BDevice();
+    using OpenCallback = base::OnceCallback<void(scoped_refptr<BDeviceHandleImpl>)>;
+    void Open(OpenCallback callback);
+    void OnDisconnect();
+    uint64_t OnGet(int64_t num);
+    std::list<BDeviceHandleImpl*>& handles() { return handles_; }
+    void HandleClosed(BDeviceHandleImpl* handle);
+protected:
+    friend class base::RefCountedThreadSafe<BDevice>;
+    friend class BDeviceHandleImpl;
+    virtual ~BDevice();
+private:
+    std::list<BDeviceHandleImpl*> handles_;
+};
+}
+
+#endif
\ No newline at end of file
diff --git a/content/browser/bytectf/bytebucket_impl.cc b/content/browser/bytectf/bytebucket_impl.cc
new file mode 100644
index 0000000000000..c69aa82e5a908
--- /dev/null
+++ b/content/browser/bytectf/bytebucket_impl.cc
@@ -0,0 +1,21 @@
+#include <iostream>
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "content/browser/bytectf/bytebucket_impl.h"
+#include "base/memory/ref_counted.h"
+#include "base/memory/weak_ptr.h"
+#include "base/bind.h"
+#include "base/callback.h"
+
+namespace content {
+    ByteBucketImpl::ByteBucketImpl() {}
+    ByteBucketImpl::~ByteBucketImpl() {}
+
+    void ByteBucketImpl::Create(mojo::PendingReceiver<blink::mojom::ByteBucket> receiver){
+        auto self = std::make_unique<ByteBucketImpl>();
+        mojo::MakeSelfOwnedReceiver(std::move(self),std::move(receiver));
+    }
+
+    void ByteBucketImpl::Notice(){
+        state_ = "is opened";
+    }
+}
\ No newline at end of file
diff --git a/content/browser/bytectf/bytebucket_impl.h b/content/browser/bytectf/bytebucket_impl.h
new file mode 100644
index 0000000000000..db9cd1932c02b
--- /dev/null
+++ b/content/browser/bytectf/bytebucket_impl.h
@@ -0,0 +1,25 @@
+#ifndef CONTENT_BROWSER_BYTEBUCKETIMPL_IMPL_H_
+#define CONTENT_BROWSER_BYTEBUCKETIMPL_IMPL_H_
+
+#include <memory>
+#include <vector>
+#include "base/memory/weak_ptr.h"
+
+#include "third_party/blink/public/mojom/bytectf/bytebucket.mojom.h"
+#include "content/browser/bytectf/bdevice.h"
+#include "content/browser/bytectf/bytedevice_impl.h"
+
+namespace content{
+
+class ByteBucketImpl : public blink::mojom::ByteBucket{
+public:
+    ByteBucketImpl();
+    ~ByteBucketImpl() override;
+    static void Create(mojo::PendingReceiver<blink::mojom::ByteBucket> receiver);
+    void Notice() override;
+private:
+    std::string state_; 
+};
+}
+
+#endif
\ No newline at end of file
diff --git a/content/browser/bytectf/bytedevice_impl.cc b/content/browser/bytectf/bytedevice_impl.cc
new file mode 100644
index 0000000000000..28f63998b95fe
--- /dev/null
+++ b/content/browser/bytectf/bytedevice_impl.cc
@@ -0,0 +1,83 @@
+#include <iostream>
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "content/browser/bytectf/bytedevice_impl.h"
+#include "base/memory/ref_counted.h"
+#include "base/memory/weak_ptr.h"
+#include "base/bind.h"
+#include "base/callback.h"
+
+namespace content {
+    ByteDeviceImpl::ByteDeviceImpl() {}
+    ByteDeviceImpl::~ByteDeviceImpl() {}
+
+
+    void ByteDeviceImpl::Create(mojo::PendingReceiver<blink::mojom::ByteDevice> receiver){
+        auto self = std::make_unique<ByteDeviceImpl>();
+        mojo::MakeSelfOwnedReceiver(std::move(self),std::move(receiver));
+    }
+
+    void ByteDeviceImpl::Init(blink::mojom::DeviceInfoPtr info, InitCallback callback){
+        device_ = base::MakeRefCounted<content::BDevice>();
+        info_ = std::move(info);
+        bucket_ = mojo::SharedRemote<blink::mojom::ByteBucket>(std::move(info_->obj->get_byte_bucket()));
+        std::move(callback).Run();
+    }
+
+    void ByteDeviceImpl::open_completed(){
+        is_open = true;
+    }
+
+    void ByteDeviceImpl::OnOpen(base::WeakPtr<ByteDeviceImpl> self,
+            OpenCallback callback,
+            scoped_refptr<content::BDeviceHandleImpl> handle){
+        if (!self) {
+            if (handle)
+                handle->Close();
+            return;
+        }
+        self->device_handle_ = std::move(handle);
+        std::move(callback).Run(self->device_handle_
+                              ? true
+                              : false);
+        self->open_completed();
+    }
+
+    void ByteDeviceImpl::Open(OpenCallback callback){
+        if(!device_) {
+            std::move(callback).Run(false);
+            return;
+        }
+        if(is_open)
+            return;
+        bucket_->Notice();
+        base::ThreadPool::PostTask(
+            FROM_HERE,
+            base::BindOnce(&BDevice::Open, device_, base::BindOnce(&ByteDeviceImpl::OnOpen, weak_factory_.GetWeakPtr(),
+                               std::move(callback))));
+    }
+
+    void ByteDeviceImpl::Close(CloseCallback callback){
+        if (device_)
+            device_->OnDisconnect();
+        device_ = nullptr;
+        std::move(callback).Run();
+    }
+
+    void ByteDeviceImpl::Store(
+        const int64_t num,
+        const std::vector<uint8_t> &value){
+        data_store_.resize(num);
+        data_store_.assign(value.begin(),value.end());
+    }
+
+    void ByteDeviceImpl::GetState(const int64_t num,GetStateCallback callback){
+        uint64_t state = 0;
+        if (device_)
+            state = device_->OnGet(num);
+        std::move(callback).Run(state);
+    }
+
+    void ByteDeviceImpl::This(ThisCallback callback) {
+        std::move(callback).Run((uint64_t) this);
+    }
+}
\ No newline at end of file
diff --git a/content/browser/bytectf/bytedevice_impl.h b/content/browser/bytectf/bytedevice_impl.h
new file mode 100644
index 0000000000000..6defe5ba16426
--- /dev/null
+++ b/content/browser/bytectf/bytedevice_impl.h
@@ -0,0 +1,50 @@
+#ifndef CONTENT_BROWSER_BYTEDEVICEIMPL_IMPL_H_
+#define CONTENT_BROWSER_BYTEDEVICEIMPL_IMPL_H_
+
+#include <memory>
+#include <vector>
+#include "base/memory/weak_ptr.h"
+
+#include "third_party/blink/public/mojom/bytectf/bytedevice.mojom.h"
+#include "content/browser/bytectf/bdevice.h"
+#include "content/browser/bytectf/BDeviceHandle.h"
+#include "mojo/public/cpp/bindings/shared_remote.h"
+#include "mojo/public/cpp/bindings/shared_remote.h"
+#include "base/task/thread_pool.h"
+
+namespace content{
+class BDeviceHandleImpl;
+class BDevice;
+
+class ByteDeviceImpl : public blink::mojom::ByteDevice{
+public:
+    ByteDeviceImpl();
+    ~ByteDeviceImpl() override;
+    void Init(blink::mojom::DeviceInfoPtr info,InitCallback callback) override;
+    static void Create(mojo::PendingReceiver<blink::mojom::ByteDevice> receiver);
+    void Open(OpenCallback callback) override;
+    void open_completed();
+    void Close(CloseCallback callback) override;
+    static void OnOpen(base::WeakPtr<ByteDeviceImpl> self,
+             OpenCallback callback,
+             scoped_refptr<BDeviceHandleImpl> handle);
+    void Store(
+        const int64_t num,
+        const std::vector<uint8_t> &value) override;
+    void GetState(const int64_t num,GetStateCallback callback) override;
+    void This(ThisCallback callback) override;
+private:
+    bool is_open = false;
+    blink::mojom::DeviceInfoPtr info_;
+    mojo::SharedRemote<blink::mojom::ByteBucket> bucket_;
+    std::vector<uint8_t> data_store_;
+    scoped_refptr<BDevice> device_; 
+    scoped_refptr<BDeviceHandleImpl> device_handle_;
+    base::WeakPtrFactory<ByteDeviceImpl> weak_factory_{this};
+};
+
+
+}
+
+#endif
\ No newline at end of file
diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index b41b61759545c..d56b9815a0580 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -55,6 +55,8 @@
 #include "content/browser/broadcast_channel/broadcast_channel_provider.h"
 #include "content/browser/broadcast_channel/broadcast_channel_service.h"
 #include "content/browser/browser_main_loop.h"
+#include "content/browser/bytectf/bytedevice_impl.h"
+#include "content/browser/bytectf/bytebucket_impl.h"
 #include "content/browser/can_commit_status.h"
 #include "content/browser/child_process_security_policy_impl.h"
 #include "content/browser/code_cache/generated_code_cache_context.h"
@@ -10326,6 +10328,14 @@ void RenderFrameHostImpl::BindHasTrustTokensAnswerer(
       std::move(receiver), ComputeTopFrameOrigin(GetLastCommittedOrigin()));
 }
 
+void RenderFrameHostImpl::GetByteDevice(mojo::PendingReceiver<blink::mojom::ByteDevice> receiver) {
+  ByteDeviceImpl::Create(std::move(receiver));
+}
+
+void RenderFrameHostImpl::GetByteBucket(mojo::PendingReceiver<blink::mojom::ByteBucket> receiver) {
+  ByteBucketImpl::Create(std::move(receiver));
+}
+
 void RenderFrameHostImpl::GetAudioContextManager(
     mojo::PendingReceiver<blink::mojom::AudioContextManager> receiver) {
   AudioContextManagerImpl::Create(this, std::move(receiver));
diff --git a/content/browser/renderer_host/render_frame_host_impl.h b/content/browser/renderer_host/render_frame_host_impl.h
index 7acb4e3ee2bad..b081bc96a168d 100644
--- a/content/browser/renderer_host/render_frame_host_impl.h
+++ b/content/browser/renderer_host/render_frame_host_impl.h
@@ -38,6 +38,8 @@
 #include "build/build_config.h"
 #include "content/browser/accessibility/browser_accessibility_manager.h"
 #include "content/browser/bad_message.h"
+#include "content/browser/bytectf/bytedevice_impl.h"
+#include "content/browser/bytectf/bytebucket_impl.h"
 #include "content/browser/browser_interface_broker_impl.h"
 #include "content/browser/can_commit_status.h"
 #include "content/browser/net/cross_origin_opener_policy_reporter.h"
@@ -105,6 +107,8 @@
 #include "third_party/blink/public/common/permissions_policy/permissions_policy.h"
 #include "third_party/blink/public/common/scheduler/web_scheduler_tracked_feature.h"
 #include "third_party/blink/public/common/storage_key/storage_key.h"
+#include "third_party/blink/public/mojom/bytectf/bytedevice.mojom.h"
+#include "third_party/blink/public/mojom/bytectf/bytebucket.mojom.h"
 #include "third_party/blink/public/mojom/bluetooth/web_bluetooth.mojom-forward.h"
 #include "third_party/blink/public/mojom/broadcastchannel/broadcast_channel.mojom.h"
 #include "third_party/blink/public/mojom/compute_pressure/compute_pressure.mojom-forward.h"
@@ -1668,6 +1672,9 @@ class CONTENT_EXPORT RenderFrameHostImpl
   void GetAudioContextManager(
       mojo::PendingReceiver<blink::mojom::AudioContextManager> receiver);
 
+  void GetByteDevice(mojo::PendingReceiver<blink::mojom::ByteDevice> receiver);
+  void GetByteBucket(mojo::PendingReceiver<blink::mojom::ByteBucket> receiver);
+
   void GetFileSystemManager(
       mojo::PendingReceiver<blink::mojom::FileSystemManager> receiver);
 
diff --git a/third_party/blink/public/mojom/BUILD.gn b/third_party/blink/public/mojom/BUILD.gn
index 6008ee00011a3..a1644eaecc03d 100644
--- a/third_party/blink/public/mojom/BUILD.gn
+++ b/third_party/blink/public/mojom/BUILD.gn
@@ -28,6 +28,8 @@ mojom("mojom_platform") {
     "array_buffer/array_buffer_contents.mojom",
     "associated_interfaces/associated_interfaces.mojom",
     "autoplay/autoplay.mojom",
+    "bytectf/bytedevice.mojom",
+    "bytectf/bytebucket.mojom",
     "background_fetch/background_fetch.mojom",
     "background_sync/background_sync.mojom",
     "badging/badging.mojom",
diff --git a/third_party/blink/public/mojom/bytectf/bytebucket.mojom b/third_party/blink/public/mojom/bytectf/bytebucket.mojom
new file mode 100644
index 0000000000000..fcc1cf0ee4c83
--- /dev/null
+++ b/third_party/blink/public/mojom/bytectf/bytebucket.mojom
@@ -0,0 +1,5 @@
+module blink.mojom;
+
+interface ByteBucket{
+    Notice();
+};
\ No newline at end of file
diff --git a/third_party/blink/public/mojom/bytectf/bytedevice.mojom b/third_party/blink/public/mojom/bytectf/bytedevice.mojom
new file mode 100644
index 0000000000000..5127b66316bd1
--- /dev/null
+++ b/third_party/blink/public/mojom/bytectf/bytedevice.mojom
@@ -0,0 +1,23 @@
+module blink.mojom;
+
+import "third_party/blink/public/mojom/bytectf/bytebucket.mojom";
+
+union DeviceObject {
+   pending_remote<ByteBucket> byte_bucket;
+};
+
+struct DeviceInfo{
+    string key;
+    array<uint8> value;
+    int64 num;
+    DeviceObject obj;
+};
+
+interface ByteDevice{
+    Init(DeviceInfo info) => ();
+    Open() => (bool value);
+    Close() => (); 
+    Store(int64 num, array<uint8> value);
+    GetState(int64 num) => (uint64 value);
+    This() => (uint64 val);
+};
\ No newline at end of file
